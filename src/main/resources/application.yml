### This is the main way to configure the application (other than annotations).
### This file is in Yaml format but you can also configure spring boot using the traditional
### Java properties file format.

spring.jmx:
   enabled: false

spring.profiles: default

spring:
  profiles:
    active: default
  jpa:
    database: MYSQL
    show-sql: true
    hibernate:
      ddl-auto: validate
  datasource:
    platform: mysql
    url: jdbc:mysql://localhost:3306/miniproject
    username: root
    password:
    driverClassName: com.mysql.jdbc.Driver

---
spring.profiles: test

spring:
    datasource:
      platform: h2
      url: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE;MODE=MYSQL
      driverClassName: org.h2.Driver
    jpa:
        database: H2
        generate-ddl: true
        hibernate.ddl-auto: create-drop

server:
  port: 8080

#todo: make sure to always enable security in production
security:
  basic:
  enabled: false

#management endpoints on a separate port
management:
  port: 8080
  security:
    enabled: false # management port is internal only. no need to secure it.

#default project info followed by actual injected pom-specified values.
project:
  name: spring-boot-rest-example
  version: 0.1
  description: boot-example default description
info:
  build:
    artifact: ${project.artifactId}
    name: ${project.name}
    description: ${project.description}
    version: ${project.version}

hotel.service:
  name: 'default profile:'
---
#spring:
#  profiles: test
#  h2:
#    console:
#      enabled: true




hotel.service:
  name: 'test profile:'

logging:
  file: boot_example.log
org.hibernate: INFO

endpoints:
  flyway:
    web:
      enabled: true

weather:
  url: 'http://api.openweathermap.org/data/2.5/weather?q=cairo&appid=9dc9e56ace548fb9042b05e2c626b127'
  name: 'openweather'

